import { Address, Hash, Hex } from "viem";
import { CeloNetworkConfig, Transaction, TokenTransfer, TransactionRequest, TransactionReceipt, SimulationResult } from "./types";
export declare class CeloClient {
    private publicClient;
    private walletClient;
    private network;
    private chain;
    constructor(privateKey: string, network: 'alfajores' | 'mainnet', rpcUrl?: string);
    getNetworkConfig(): CeloNetworkConfig;
    private getNetworkConfigInternal;
    getBalance(address: Address): Promise<bigint>;
    getTokenBalance(token: Address, address: Address): Promise<bigint>;
    sendNativeToken(to: Address, amount: bigint): Promise<Hash>;
    sendToken(token: Address, to: Address, amount: bigint): Promise<Hash>;
    getTransactionHistory(address: Address, fromBlock?: bigint, toBlock?: bigint): Promise<Transaction[]>;
    getTokenTransfers(token: Address, address: Address, fromBlock?: bigint): Promise<TokenTransfer[]>;
    readContract<T>(address: Address, abi: any, functionName: string, args?: any[]): Promise<T>;
    writeContract(address: Address, abi: any, functionName: string, args?: any[], value?: bigint): Promise<Hash>;
    registerAgent(agentType: string, dailyLimit: bigint, perTxLimit: bigint): Promise<bigint>;
    checkAgentPermission(agentId: bigint, operation: string, amount: bigint, recipient: Address): Promise<boolean>;
    recordAgentAction(agentId: bigint, actionType: string, amount: bigint, data: Hex): Promise<Hash>;
    depositToTreasury(token: Address, amount: bigint): Promise<Hash>;
    agentWithdrawFromTreasury(agentId: bigint, token: Address, recipient: Address, amount: bigint): Promise<Hash>;
    batchTransferFromTreasury(agentId: bigint, token: Address, recipients: Address[], amounts: bigint[]): Promise<Hash>;
    estimateGas(tx: TransactionRequest): Promise<bigint>;
    getCurrentGasPrice(): Promise<bigint>;
    simulateTransaction(tx: TransactionRequest): Promise<SimulationResult>;
    waitForTransaction(hash: Hash): Promise<TransactionReceipt>;
    getTransactionReceipt(hash: Hash): Promise<TransactionReceipt>;
    setContractAddresses(contracts: Partial<CeloNetworkConfig['contracts']>): void;
    getAddresses(): Promise<Address[]>;
    getBlock(params: {
        blockNumber: bigint;
        includeTransactions: boolean;
    }): Promise<{
        number: bigint;
        nonce: `0x${string}`;
        hash: `0x${string}`;
        logsBloom: `0x${string}`;
        baseFeePerGas: bigint | null;
        blobGasUsed: bigint;
        difficulty: bigint;
        excessBlobGas: bigint;
        extraData: Hex;
        gasLimit: bigint;
        gasUsed: bigint;
        miner: Address;
        mixHash: Hash;
        parentBeaconBlockRoot?: `0x${string}` | undefined;
        parentHash: Hash;
        receiptsRoot: Hex;
        sealFields: Hex[];
        sha3Uncles: Hash;
        size: bigint;
        stateRoot: Hash;
        timestamp: bigint;
        totalDifficulty: bigint | null;
        transactionsRoot: Hash;
        uncles: Hash[];
        withdrawals?: import("viem").Withdrawal[] | undefined | undefined;
        withdrawalsRoot?: `0x${string}` | undefined;
        transactions: `0x${string}`[] | ({
            type: "legacy";
            to: Address | null;
            from: Address;
            gas: bigint;
            nonce: number;
            value: bigint;
            blobVersionedHashes?: undefined | undefined;
            gasPrice: bigint;
            maxFeePerBlobGas?: undefined | undefined;
            maxFeePerGas?: undefined | undefined;
            maxPriorityFeePerGas?: undefined | undefined;
            accessList?: undefined | undefined;
            authorizationList?: undefined | undefined;
            hash: Hash;
            r: Hex;
            s: Hex;
            v: bigint;
            yParity?: undefined | undefined;
            chainId?: number | undefined;
            input: Hex;
            typeHex: Hex | null;
            blockNumber: bigint;
            blockHash: `0x${string}`;
            transactionIndex: number;
        } | {
            type: "eip2930";
            to: Address | null;
            from: Address;
            gas: bigint;
            nonce: number;
            value: bigint;
            blobVersionedHashes?: undefined | undefined;
            gasPrice: bigint;
            maxFeePerBlobGas?: undefined | undefined;
            maxFeePerGas?: undefined | undefined;
            maxPriorityFeePerGas?: undefined | undefined;
            accessList: import("viem").AccessList;
            authorizationList?: undefined | undefined;
            hash: Hash;
            r: Hex;
            s: Hex;
            v: bigint;
            yParity: number;
            chainId: number;
            input: Hex;
            typeHex: Hex | null;
            blockNumber: bigint;
            blockHash: `0x${string}`;
            transactionIndex: number;
        } | {
            type: "eip1559";
            to: Address | null;
            from: Address;
            gas: bigint;
            nonce: number;
            value: bigint;
            blobVersionedHashes?: undefined | undefined;
            gasPrice?: undefined | undefined;
            maxFeePerBlobGas?: undefined | undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList: import("viem").AccessList;
            authorizationList?: undefined | undefined;
            hash: Hash;
            r: Hex;
            s: Hex;
            v: bigint;
            yParity: number;
            chainId: number;
            input: Hex;
            typeHex: Hex | null;
            blockNumber: bigint;
            blockHash: `0x${string}`;
            transactionIndex: number;
        } | {
            type: "eip4844";
            to: Address | null;
            from: Address;
            gas: bigint;
            nonce: number;
            value: bigint;
            blobVersionedHashes: readonly Hex[];
            gasPrice?: undefined | undefined;
            maxFeePerBlobGas: bigint;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList: import("viem").AccessList;
            authorizationList?: undefined | undefined;
            hash: Hash;
            r: Hex;
            s: Hex;
            v: bigint;
            yParity: number;
            chainId: number;
            input: Hex;
            typeHex: Hex | null;
            blockNumber: bigint;
            blockHash: `0x${string}`;
            transactionIndex: number;
        } | {
            type: "eip7702";
            to: Address | null;
            from: Address;
            gas: bigint;
            nonce: number;
            value: bigint;
            blobVersionedHashes?: undefined | undefined;
            gasPrice?: undefined | undefined;
            maxFeePerBlobGas?: undefined | undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList: import("viem").AccessList;
            authorizationList: import("viem").SignedAuthorizationList;
            hash: Hash;
            r: Hex;
            s: Hex;
            v: bigint;
            yParity: number;
            chainId: number;
            input: Hex;
            typeHex: Hex | null;
            blockNumber: bigint;
            blockHash: `0x${string}`;
            transactionIndex: number;
        })[];
    }>;
    getLogs(params: any): Promise<import("viem").GetLogsReturnType<undefined, undefined, undefined, undefined, undefined>>;
    getBlockNumber(): Promise<bigint>;
}
//# sourceMappingURL=celo-client.d.ts.map